// Test complet de d√©tection des 12 le√ßons du programme Terminale D

const testCases = [
  {
    id: 1,
    expectedLesson: "Limites et continuit√©",
    problem: "La maman d'un √©l√®ve d√©sire une relance publicitaire. Elle fait imprimer des d√©pliants qui lui co√ªtent 4000 FCFA en frais fixes plus 100 FCFA par d√©pliant. D√©terminer le co√ªt d'un d√©pliant par client pour une production de d√©pliants √† long terme."
  },
  {
    id: 2,
    expectedLesson: "Probabilit√©",
    problem: "Dans une usine de microprocesseurs, 4% de la production est d√©fectueuse. Le syst√®me de v√©rification d√©tecte 95% des microprocesseurs d√©fectueux et d√©clare d√©fectueux 2% des microprocesseurs qui ne pr√©sentent aucun d√©faut. D√©terminer la probabilit√© qu'il y ait erreur lors du contr√¥le."
  },
  {
    id: 3,
    expectedLesson: "D√©rivabilit√© et √©tude de fonctions",
    problem: "M. Bolou a une feuille m√©tallique rectangulaire de 12 cm de largeur et 2 m de longueur. Il veut la modeler pour en faire une goutti√®re en pliant les deux longs c√¥t√©s. Proposer la hauteur des c√¥t√©s relev√©s pour que la goutti√®re ait une contenance maximale."
  },
  {
    id: 4,
    expectedLesson: "Primitives",
    problem: "Un p√¢tissier commercialise des glaces. Pour x centaines de glaces produites, B'(x) = -20x + 30 o√π B(x) est le b√©n√©fice en milliers de francs. Pour une centaine de glaces vendue, son b√©n√©fice est 20 mille francs. D√©terminer son b√©n√©fice maximal."
  },
  {
    id: 5,
    expectedLesson: "Fonctions logarithmes",
    problem: "Une mod√©lisation math√©matique permet d'√©tablir f(x) = 1 - 8310ln(x) o√π f(x) est l'√¢ge en ann√©es d'un fossile et x la fraction de carbone 14. Calculer l'√¢ge d'un fossile qui contient encore 35% de son carbone 14."
  },
  {
    id: 6,
    expectedLesson: "Nombres Complexes (Partie 1 : Forme Alg√©brique)",
    problem: "R√©soudre dans l'ensemble des nombres complexes C l'√©quation z¬≤ - 6z + 13 = 0"
  },
  {
    id: 7,
    expectedLesson: "Fonctions Exponentielles et Fonctions Puissances",
    problem: "La pharmacocin√©tique √©tudie l'√©volution d'un m√©dicament. Le mod√®le math√©matique est f(t) = 20e^(-0,1t). La demi-vie du m√©dicament est la dur√©e apr√®s laquelle la concentration est √©gale √† la moiti√© de la concentration initiale. D√©terminer la demi-vie."
  },
  {
    id: 8,
    expectedLesson: "Nombres Complexes et G√©om√©trie",
    problem: "Un math√©maticien peintre pr√©cise que les sommets des triangles sont des points An d'affixe zn telle que z0 = 6 et pour tout entier naturel n, zn+1 = (4+i4)/3 √ó zn. Reproduire le dessin en utilisant les nombres complexes."
  },
  {
    id: 9,
    expectedLesson: "Suites num√©riques",
    problem: "Deux bassins d'eau A et B contiennent respectivement 800 m¬≥ et 1400 m¬≥. Chaque jour, 10% du volume d'eau du bassin A est transf√©r√© dans B, et 15% du volume de B est transf√©r√© dans A. D√©terminer si le bassin A aura plus d'eau que B apr√®s un certain nombre de jours."
  },
  {
    id: 10,
    expectedLesson: "Calcul int√©gral",
    problem: "La capacit√© pulmonaire est mod√©lis√©e par f(x) = 110(ln(x)-2)/x o√π x est l'√¢ge. Justifier par le calcul int√©gral que la capacit√© pulmonaire moyenne entre 20 et 70 ans n'atteint pas 5 L."
  },
  {
    id: 11,
    expectedLesson: "Statistique √† deux variables",
    problem: "Des √©l√®ves ont une entreprise de distribution. Ils cherchent √† d√©terminer lequel des facteurs N (nombre de points de vente) ou X (frais de promotion) influence le plus leur chiffre d'affaires Y, avec les donn√©es sur 5 ans. D√©terminer la variable qui influence le chiffre d'affaires."
  },
  {
    id: 12,
    expectedLesson: "√âquations diff√©rentielles",
    problem: "Dans une for√™t, la population de singes √©tait de 512 en 2000 et de 256 en 2016. La vitesse de diminution est proportionnelle √† la population. Le chef de classe affirme qu'il ne devrait plus y avoir de singes apr√®s 2030. Confirmer ou infirmer cette affirmation."
  }
];

async function testLesson(testCase) {
  try {
    const response = await fetch('http://localhost:5000/api/solve', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ text: testCase.problem })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    const detectedLesson = data.subject;
    
    // Comparaison flexible pour g√©rer les variations de noms
    const isCorrect = 
      detectedLesson.toLowerCase().includes(testCase.expectedLesson.toLowerCase()) || 
      testCase.expectedLesson.toLowerCase().includes(detectedLesson.toLowerCase().split(' ')[0]) ||
      (testCase.expectedLesson.includes("Probabilit√©") && detectedLesson.includes("Probabilit√©"));
    
    return {
      id: testCase.id,
      expected: testCase.expectedLesson,
      detected: detectedLesson,
      correct: isCorrect,
      problem: testCase.problem.substring(0, 60) + "..."
    };
  } catch (error) {
    return {
      id: testCase.id,
      expected: testCase.expectedLesson,
      detected: 'ERROR: ' + error.message,
      correct: false,
      problem: testCase.problem.substring(0, 60) + "..."
    };
  }
}

async function runAllTests() {
  console.log('üß™ Test complet de d√©tection des 12 le√ßons - Programme Terminale D\n');
  
  const results = [];
  let correctCount = 0;
  
  for (const testCase of testCases) {
    console.log(`\nTest ${testCase.id}/12: ${testCase.expectedLesson}`);
    console.log(`Probl√®me: ${testCase.problem.substring(0, 80)}...`);
    
    const result = await testLesson(testCase);
    results.push(result);
    
    if (result.correct) {
      correctCount++;
      console.log(`‚úÖ CORRECT: ${result.detected}`);
    } else {
      console.log(`‚ùå INCORRECT:`);
      console.log(`   Attendu: ${result.expected}`);
      console.log(`   Obtenu:  ${result.detected}`);
    }
    
    // Pause entre les tests
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üìä R√âSULTATS FINAUX:');
  console.log('='.repeat(60));
  console.log(`Taux de r√©ussite: ${correctCount}/${testCases.length} (${Math.round(correctCount/testCases.length*100)}%)\n`);
  
  if (correctCount === testCases.length) {
    console.log('üéâ PARFAIT! Toutes les le√ßons sont correctement d√©tect√©es.');
  } else {
    console.log('‚ùå √âCHECS D√âTAILL√âS:');
    results.filter(r => !r.correct).forEach(r => {
      console.log(`\n- Le√ßon ${r.id}: ${r.expected}`);
      console.log(`  Probl√®me: ${r.problem}`);
      console.log(`  D√©tect√© comme: ${r.detected}`);
    });
  }
  
  console.log('\nüìà R√âCAPITULATIF PAR DOMAINE:');
  const domaines = {
    'Analyse': [1, 3, 5, 7, 9, 10],
    'Alg√®bre': [4, 6, 8, 12],
    'Probabilit√©s/Statistiques': [2, 11]
  };
  
  Object.entries(domaines).forEach(([domaine, lessonIds]) => {
    const domainResults = results.filter(r => lessonIds.includes(r.id));
    const domainSuccess = domainResults.filter(r => r.correct).length;
    console.log(`${domaine}: ${domainSuccess}/${domainResults.length} (${Math.round(domainSuccess/domainResults.length*100)}%)`);
  });
  
  return results;
}

// Ex√©cuter les tests
runAllTests().catch(console.error);